openapi: 3.0.1
info:
  title: Cosmo Cats Intergalactic Marketplace API
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /api/v1/product/{id}:
    get:
      summary: Get product by id
      tags:
        - Product
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the product to retrieve
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Product
      operationId: updateProduct
      summary: Update product by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the product to update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
        required: true
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Product
      operationId: deleteProduct
      summary: Delete product by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the product to delete
      responses:
        '204':
          description: Product deleted
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/category/{id}:
    get:
      tags:
        - Category
      operationId: getCategoryById
      summary: Get category by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Category
      operationId: updateCategory
      summary: Update category by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
        required: true
      responses:
        '200':
          description: Category updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Category
      operationId: deleteCategory
      summary: Delete category by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v1/product:
    get:
      tags:
        - Product
      operationId: getAllProducts
      summary: Get all products
      responses:
        '200':
          description: List of all products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListDto'
    post:
      summary: Create a new product
      tags:
        - Product
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductDto'
        required: true
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/category:
    get:
      tags:
        - Category
      operationId: getAllCategories
      summary: Get all products
      responses:
        '200':
          description: List of all categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListDto'
    post:
      tags:
        - Category
      operationId: createCategory
      summary: Create a new category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryDto'
        required: true
      responses:
        '200':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryDto'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
components:
  schemas:
    ProductDto:
      required:
        - productName
      type: object
      properties:
        productName:
          type: string
          maxLength: 100
          pattern: "(?i).*(star|galaxy|comet|mercury|venus
                    |earth|mars|jupiter|saturn|uranus|neptune
                    |pluto|sun|milky way|galaxy|space|astronaut).*"
          description: Name of the product
        categoryId:
          type: string
          description: ID of the product category
        productDescription:
          maxLength: 255
          minLength: 0
          type: string
          description: Description of the product
        price:
          type: number
          format: double
          minimum: 0.0
          description: Price of the product
        quantity:
          type: integer
          format: int32
          minimum: 0
          description: Quantity of the product in stock
    CategoryDto:
      required:
        - categoryName
      type: object
      properties:
        categoryName:
          type: string
          minLength: 0
          maxLength: 100
          pattern: "(?i).*(star|galaxy|comet|mercury|venus
                    |earth|mars|jupiter|saturn|uranus|neptune
                    |pluto|sun|milky way|galaxy|space|astronaut).*"
          description: Name of the category
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductDto'
          description: List of products belonging to the category
    ProductEntryDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the product
        categoryId:
          type: string
          description: ID of the product category
        productName:
          type: string
          description: Name of the product
        productDescription:
          type: string
          description: Description of the product
        price:
          type: number
          format: double
          description: Price of the product
        quantity:
          type: integer
          format: int32
          description: Quantity of the product in stock
    ProductListDto:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductEntryDto'
    CategoryEntryDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductEntryDto'
    CategoryListDto:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/CategoryEntryDto'
    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: URI reference identifying the error type
        title:
          type: string
          description: A short description of the error
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Detailed description of the error
    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: "400"
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ParamsViolationDetails'
    ParamsViolationDetails:
      type: object
      properties:
        fieldName:
          type: string
          description: Field where validation error occurred
        reason:
          type: string
          description: Reason for the validation error